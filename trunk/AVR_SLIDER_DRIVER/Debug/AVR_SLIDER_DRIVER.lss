
AVR_SLIDER_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000694  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000694  00000748  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800062  00800062  0000074a  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  0000074a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000930  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000212  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00001292  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000001b2  00000000  00000000  000012b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000005b5  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000001af  00000000  00000000  00001a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000607  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000000b0  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000264  00000000  00000000  00002280  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000185  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000044  00000000  00000000  00002669  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	5d c0       	rjmp	.+186    	; 0xc2 <__vector_3>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	82 c0       	rjmp	.+260    	; 0x110 <__vector_5>
   c:	9e c0       	rjmp	.+316    	; 0x14a <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e4 e9       	ldi	r30, 0x94	; 148
  36:	f6 e0       	ldi	r31, 0x06	; 6
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	af 37       	cpi	r26, 0x7F	; 127
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	0f d1       	rcall	.+542    	; 0x274 <main>
  56:	1c c3       	rjmp	.+1592   	; 0x690 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <USART_Transmit>:
#ifndef USART_H_
#define USART_H_


void USART_Transmit(char volatile data)
{
  5a:	df 93       	push	r29
  5c:	cf 93       	push	r28
  5e:	0f 92       	push	r0
  60:	cd b7       	in	r28, 0x3d	; 61
  62:	de b7       	in	r29, 0x3e	; 62
  64:	89 83       	std	Y+1, r24	; 0x01
   while ( !( UCSRA & (1<<UDRE)) );         /* Wait for empty transmit buffer */ 
  66:	5d 9b       	sbis	0x0b, 5	; 11
  68:	fe cf       	rjmp	.-4      	; 0x66 <USART_Transmit+0xc>
   UDR = data;
  6a:	89 81       	ldd	r24, Y+1	; 0x01
  6c:	8c b9       	out	0x0c, r24	; 12
}
  6e:	0f 90       	pop	r0
  70:	cf 91       	pop	r28
  72:	df 91       	pop	r29
  74:	08 95       	ret

00000076 <USART_Init>:

void USART_Init(uint16_t ubrr_value) 
{ 
   UBRRL = ubrr_value; 
  76:	89 b9       	out	0x09, r24	; 9
   UBRRH = (ubrr_value>>8); 
  78:	92 b9       	out	0x02, r25	; 2
   UCSRC = (1 << UCSZ1) | (1 << UCSZ0); 
  7a:	86 e0       	ldi	r24, 0x06	; 6
  7c:	83 b9       	out	0x03, r24	; 3
   UCSRB=  1<<TXEN | 1<<RXEN | 1<<RXCIE;// | 1<<TXEN | 1<<RXCIE | 1<<TXCIE; 
  7e:	88 e9       	ldi	r24, 0x98	; 152
  80:	8a b9       	out	0x0a, r24	; 10
}
  82:	08 95       	ret

00000084 <USART_TransmitString>:

void USART_TransmitString (char volatile *str) 
{ 
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	ec 01       	movw	r28, r24
   while ((*str != 0) /*&& (*str != 10)*/) USART_Transmit (*str++); 
  8a:	88 81       	ld	r24, Y
  8c:	88 23       	and	r24, r24
  8e:	29 f0       	breq	.+10     	; 0x9a <USART_TransmitString+0x16>
  90:	89 91       	ld	r24, Y+
  92:	e3 df       	rcall	.-58     	; 0x5a <USART_Transmit>
  94:	88 81       	ld	r24, Y
  96:	88 23       	and	r24, r24
  98:	d9 f7       	brne	.-10     	; 0x90 <USART_TransmitString+0xc>
} 
  9a:	df 91       	pop	r29
  9c:	cf 91       	pop	r28
  9e:	08 95       	ret

000000a0 <AdcStart>:
volatile char INITIAL_LOCK = 1;
volatile char CLEAR_WAIT = 0;

void AdcStart(void)        
{
  AdcBusy = 1;                
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 62 00 	sts	0x0062, r24
  SET_TIMER1_STOP;
  a6:	1e bc       	out	0x2e, r1	; 46
  SET_TIMER1_CLEAR;			// wyzeruj timer 1
  a8:	1d bc       	out	0x2d, r1	; 45
  aa:	1c bc       	out	0x2c, r1	; 44
  SET_COMPARATOR_ENABLE;
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	88 b9       	out	0x08, r24	; 8
  DDRB &= ~(1<<C_PIN);		// ustaw liniê kondenstaora (- komparatora) jako wejœcie
  b0:	b8 98       	cbi	0x17, 0	; 23
  PORTB |= (1<<R_PIN);      // ³adujemy kondensator
  b2:	c2 9a       	sbi	0x18, 2	; 24
  SET_TIMER1_START;			// START LICZNIKA
  b4:	81 ec       	ldi	r24, 0xC1	; 193
  b6:	8e bd       	out	0x2e, r24	; 46
  while(AdcBusy);			// czekaj na przerwanie od przechwytywania lub przepe³nienia
  b8:	80 91 62 00 	lds	r24, 0x0062
  bc:	88 23       	and	r24, r24
  be:	e1 f7       	brne	.-8      	; 0xb8 <AdcStart+0x18>
}
  c0:	08 95       	ret

000000c2 <__vector_3>:

ISR (TIMER1_CAPT_vect)    // przerwanie od przechwytywania licznika 1
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	af 93       	push	r26
  d2:	bf 93       	push	r27
  AdcValue = ICR1;            // odczytaj wartoœæ z rejestru przechwytuj¹cego
  d4:	84 b5       	in	r24, 0x24	; 36
  d6:	95 b5       	in	r25, 0x25	; 37
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	80 93 67 00 	sts	0x0067, r24
  e0:	90 93 68 00 	sts	0x0068, r25
  e4:	a0 93 69 00 	sts	0x0069, r26
  e8:	b0 93 6a 00 	sts	0x006A, r27
  SET_TIMER1_STOP;			   //TIMER1 STOP
  ec:	1e bc       	out	0x2e, r1	; 46
  PORTB &= ~(1<<R_PIN);        //wylaczamy ³adowanie kondensatora
  ee:	c2 98       	cbi	0x18, 2	; 24
  DDRB |= (1<<C_PIN);		// ustaw liniê kondenstaora (- komparatora) jako wyjœcie
  f0:	b8 9a       	sbi	0x17, 0	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <__stack+0x15>
  f8:	00 00       	nop
  _delay_us(10);			// i czekaj na roz³adowanie kondensator
  AdcBusy = 0;        
  fa:	10 92 62 00 	sts	0x0062, r1
}
  fe:	bf 91       	pop	r27
 100:	af 91       	pop	r26
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <__vector_5>:

ISR (TIMER1_OVF_vect)        // przerwanie od przepe³nienia licznika 1
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
  SET_TIMER1_STOP;
 11c:	1e bc       	out	0x2e, r1	; 46
  PORTB &= ~(1<<R_PIN);        //wylaczamy ³adowanie kondensatora
 11e:	c2 98       	cbi	0x18, 2	; 24
  DDRB |= (1<<C_PIN);		// ustaw liniê kondenstaora (- komparatora) jako wyjœcie
 120:	b8 9a       	sbi	0x17, 0	; 23
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	8a 95       	dec	r24
 126:	f1 f7       	brne	.-4      	; 0x124 <__vector_5+0x14>
 128:	00 00       	nop
  _delay_us(10);			// i czekaj na roz³adowanie kondensator
  AdcValue = 0;                // wpisz wartoœæ 0
 12a:	10 92 67 00 	sts	0x0067, r1
 12e:	10 92 68 00 	sts	0x0068, r1
 132:	10 92 69 00 	sts	0x0069, r1
 136:	10 92 6a 00 	sts	0x006A, r1
  AdcBusy = 0; 
 13a:	10 92 62 00 	sts	0x0062, r1
}
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_6>:

ISR (TIMER0_OVF_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
	TCNT0 = ACTUAL_RELEASE_TIMER_VALUE;
 15c:	80 91 7c 00 	lds	r24, 0x007C
 160:	90 91 7d 00 	lds	r25, 0x007D
 164:	82 bf       	out	0x32, r24	; 50
	PORTD ^= (1<<P_OUT_STEP);	
 166:	92 b3       	in	r25, 0x12	; 18
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	89 27       	eor	r24, r25
 16c:	82 bb       	out	0x12, r24	; 18
	if(((PINB & _BV(P_OUT_STEP)) >> P_OUT_STEP) == 1)
 16e:	b3 9b       	sbis	0x16, 3	; 22
 170:	13 c0       	rjmp	.+38     	; 0x198 <__vector_6+0x4e>
	{
		STEP_COUNT ++;
 172:	80 91 78 00 	lds	r24, 0x0078
 176:	90 91 79 00 	lds	r25, 0x0079
 17a:	a0 91 7a 00 	lds	r26, 0x007A
 17e:	b0 91 7b 00 	lds	r27, 0x007B
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	a1 1d       	adc	r26, r1
 186:	b1 1d       	adc	r27, r1
 188:	80 93 78 00 	sts	0x0078, r24
 18c:	90 93 79 00 	sts	0x0079, r25
 190:	a0 93 7a 00 	sts	0x007A, r26
 194:	b0 93 7b 00 	sts	0x007B, r27
	}
}
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <liczPowyzejPolowy>:

void liczPowyzejPolowy(uint16_t * r)
{
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	df 93       	push	r29
 1b0:	cf 93       	push	r28
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <liczPowyzejPolowy+0xa>
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	8c 01       	movw	r16, r24
	volatile int16_t tmp = AdcAvgValue / 100;
 1ba:	60 91 6b 00 	lds	r22, 0x006B
 1be:	70 91 6c 00 	lds	r23, 0x006C
 1c2:	80 91 6d 00 	lds	r24, 0x006D
 1c6:	90 91 6e 00 	lds	r25, 0x006E
 1ca:	24 e6       	ldi	r18, 0x64	; 100
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	19 d2       	rcall	.+1074   	; 0x606 <__udivmodsi4>
 1d4:	3a 83       	std	Y+2, r19	; 0x02
 1d6:	29 83       	std	Y+1, r18	; 0x01
	tmp *= 9;
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	9a 81       	ldd	r25, Y+2	; 0x02
 1dc:	9c 01       	movw	r18, r24
 1de:	22 0f       	add	r18, r18
 1e0:	33 1f       	adc	r19, r19
 1e2:	22 0f       	add	r18, r18
 1e4:	33 1f       	adc	r19, r19
 1e6:	22 0f       	add	r18, r18
 1e8:	33 1f       	adc	r19, r19
 1ea:	82 0f       	add	r24, r18
 1ec:	93 1f       	adc	r25, r19
 1ee:	9a 83       	std	Y+2, r25	; 0x02
 1f0:	89 83       	std	Y+1, r24	; 0x01
	tmp -= 15;
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	9a 81       	ldd	r25, Y+2	; 0x02
 1f6:	0f 97       	sbiw	r24, 0x0f	; 15
 1f8:	9a 83       	std	Y+2, r25	; 0x02
 1fa:	89 83       	std	Y+1, r24	; 0x01
	*r = tmp;
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	f8 01       	movw	r30, r16
 202:	91 83       	std	Z+1, r25	; 0x01
 204:	80 83       	st	Z, r24
}
 206:	ce 5f       	subi	r28, 0xFE	; 254
 208:	cd bf       	out	0x3d, r28	; 61
 20a:	cf 91       	pop	r28
 20c:	df 91       	pop	r29
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	08 95       	ret

00000214 <liczPonizejPolowy>:

void liczPonizejPolowy(uint16_t * r)
{
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	df 93       	push	r29
 21a:	cf 93       	push	r28
 21c:	00 d0       	rcall	.+0      	; 0x21e <liczPonizejPolowy+0xa>
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	8c 01       	movw	r16, r24
	volatile int16_t tmp = AdcAvgValue / 100;
 224:	60 91 6b 00 	lds	r22, 0x006B
 228:	70 91 6c 00 	lds	r23, 0x006C
 22c:	80 91 6d 00 	lds	r24, 0x006D
 230:	90 91 6e 00 	lds	r25, 0x006E
 234:	24 e6       	ldi	r18, 0x64	; 100
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	e4 d1       	rcall	.+968    	; 0x606 <__udivmodsi4>
 23e:	3a 83       	std	Y+2, r19	; 0x02
 240:	29 83       	std	Y+1, r18	; 0x01
	tmp *= -12;
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	9a 81       	ldd	r25, Y+2	; 0x02
 246:	64 ef       	ldi	r22, 0xF4	; 244
 248:	7f ef       	ldi	r23, 0xFF	; 255
 24a:	cb d1       	rcall	.+918    	; 0x5e2 <__mulhi3>
 24c:	9a 83       	std	Y+2, r25	; 0x02
 24e:	89 83       	std	Y+1, r24	; 0x01
	tmp += 255;
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	9a 81       	ldd	r25, Y+2	; 0x02
 254:	81 50       	subi	r24, 0x01	; 1
 256:	9f 4f       	sbci	r25, 0xFF	; 255
 258:	9a 83       	std	Y+2, r25	; 0x02
 25a:	89 83       	std	Y+1, r24	; 0x01
	*r = tmp;
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	9a 81       	ldd	r25, Y+2	; 0x02
 260:	f8 01       	movw	r30, r16
 262:	91 83       	std	Z+1, r25	; 0x01
 264:	80 83       	st	Z, r24
}
 266:	ce 5f       	subi	r28, 0xFE	; 254
 268:	cd bf       	out	0x3d, r28	; 61
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	08 95       	ret

00000274 <main>:

int main(void)
{
 274:	9f 92       	push	r9
 276:	af 92       	push	r10
 278:	bf 92       	push	r11
 27a:	cf 92       	push	r12
 27c:	df 92       	push	r13
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
	//port B
	DDRB = (1<<R_PIN) | (1<<PB7) | (1<<SENS_TRANS_PIN);
 28a:	8c e8       	ldi	r24, 0x8C	; 140
 28c:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
 28e:	18 ba       	out	0x18, r1	; 24
	PORTB |= (1<<SENS_TRANS_PIN);
 290:	c3 9a       	sbi	0x18, 3	; 24
	
	//port D
	DDRD = 0x00;
 292:	11 ba       	out	0x11, r1	; 17
	DDRD |= (1<<P_OUT_MS1);
 294:	8e 9a       	sbi	0x11, 6	; 17
	DDRD |= (1<<P_OUT_MS2);
 296:	8d 9a       	sbi	0x11, 5	; 17
	DDRD |= (1<<P_OUT_MS3);
 298:	8c 9a       	sbi	0x11, 4	; 17
	DDRD |= (1<<P_OUT_STEP);
 29a:	8b 9a       	sbi	0x11, 3	; 17
	DDRD |= (1<<P_OUT_DIR);//P
 29c:	8a 9a       	sbi	0x11, 2	; 17
	
	PORTD = 0x00;
 29e:	12 ba       	out	0x12, r1	; 18
	PORTD |= (1<<P_OUT_MS1);
 2a0:	96 9a       	sbi	0x12, 6	; 18
	PORTD |= (1<<P_OUT_MS2);
 2a2:	95 9a       	sbi	0x12, 5	; 18
	PORTD |= (1<<P_OUT_MS3);
 2a4:	94 9a       	sbi	0x12, 4	; 18
	PORTD |= (0<<P_OUT_STEP);
 2a6:	82 b3       	in	r24, 0x12	; 18
 2a8:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<P_OUT_DIR);//P
 2aa:	92 9a       	sbi	0x12, 2	; 18
	
	SET_STEPPER_STOP;
 2ac:	13 be       	out	0x33, r1	; 51
	//
	TIMSK = (1<<TOIE0) | (1<<TOIE1) | (1<<ICIE1);
 2ae:	8a e8       	ldi	r24, 0x8A	; 138
 2b0:	89 bf       	out	0x39, r24	; 57
	
	//reading eeprom settings
	AdcMaxVal = eeprom_read_word(&eeprom_adc_max_value);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	c9 d1       	rcall	.+914    	; 0x64a <__eerd_word_tn2313>
 2b8:	a0 e0       	ldi	r26, 0x00	; 0
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	80 93 63 00 	sts	0x0063, r24
 2c0:	90 93 64 00 	sts	0x0064, r25
 2c4:	a0 93 65 00 	sts	0x0065, r26
 2c8:	b0 93 66 00 	sts	0x0066, r27
	AdcHalfValue = eeprom_read_word(&eeprom_adc_half_value);
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	bc d1       	rcall	.+888    	; 0x64a <__eerd_word_tn2313>
 2d2:	a0 e0       	ldi	r26, 0x00	; 0
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	80 93 74 00 	sts	0x0074, r24
 2da:	90 93 75 00 	sts	0x0075, r25
 2de:	a0 93 76 00 	sts	0x0076, r26
 2e2:	b0 93 77 00 	sts	0x0077, r27
	
	//kalibracja
	if(((PINB & _BV(PB7)) >> PB7) == 1)
 2e6:	b7 9b       	sbis	0x16, 7	; 22
 2e8:	60 c0       	rjmp	.+192    	; 0x3aa <main+0x136>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ea:	83 ed       	ldi	r24, 0xD3	; 211
 2ec:	90 e3       	ldi	r25, 0x30	; 48
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <main+0x7a>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0x80>
 2f4:	00 00       	nop
	{
		_delay_ms(50);
		sei();
 2f6:	78 94       	sei
		while(((PINB & _BV(PB7)) >> PB7) == 1)
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <main+0x88>
		{
			AdcStart();
 2fa:	d2 de       	rcall	.-604    	; 0xa0 <AdcStart>
	//kalibracja
	if(((PINB & _BV(PB7)) >> PB7) == 1)
	{
		_delay_ms(50);
		sei();
		while(((PINB & _BV(PB7)) >> PB7) == 1)
 2fc:	b7 99       	sbic	0x16, 7	; 22
 2fe:	fd cf       	rjmp	.-6      	; 0x2fa <main+0x86>
		{
			AdcStart();
		}
		AdcMaxVal = AdcValue;
 300:	80 91 67 00 	lds	r24, 0x0067
 304:	90 91 68 00 	lds	r25, 0x0068
 308:	a0 91 69 00 	lds	r26, 0x0069
 30c:	b0 91 6a 00 	lds	r27, 0x006A
 310:	80 93 63 00 	sts	0x0063, r24
 314:	90 93 64 00 	sts	0x0064, r25
 318:	a0 93 65 00 	sts	0x0065, r26
 31c:	b0 93 66 00 	sts	0x0066, r27
		AdcMaxVal -= 400; 
 320:	80 91 63 00 	lds	r24, 0x0063
 324:	90 91 64 00 	lds	r25, 0x0064
 328:	a0 91 65 00 	lds	r26, 0x0065
 32c:	b0 91 66 00 	lds	r27, 0x0066
 330:	80 59       	subi	r24, 0x90	; 144
 332:	91 40       	sbci	r25, 0x01	; 1
 334:	a0 40       	sbci	r26, 0x00	; 0
 336:	b0 40       	sbci	r27, 0x00	; 0
 338:	80 93 63 00 	sts	0x0063, r24
 33c:	90 93 64 00 	sts	0x0064, r25
 340:	a0 93 65 00 	sts	0x0065, r26
 344:	b0 93 66 00 	sts	0x0066, r27
		cli();
 348:	f8 94       	cli
		eeprom_write_word(&eeprom_adc_max_value, AdcMaxVal);
 34a:	20 91 63 00 	lds	r18, 0x0063
 34e:	30 91 64 00 	lds	r19, 0x0064
 352:	40 91 65 00 	lds	r20, 0x0065
 356:	50 91 66 00 	lds	r21, 0x0066
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	b9 01       	movw	r22, r18
 360:	77 d1       	rcall	.+750    	; 0x650 <__eewr_word_tn2313>
		eeprom_busy_wait();
 362:	e1 99       	sbic	0x1c, 1	; 28
 364:	fe cf       	rjmp	.-4      	; 0x362 <main+0xee>
		AdcHalfValue = AdcMaxVal >> 1;
 366:	80 91 63 00 	lds	r24, 0x0063
 36a:	90 91 64 00 	lds	r25, 0x0064
 36e:	a0 91 65 00 	lds	r26, 0x0065
 372:	b0 91 66 00 	lds	r27, 0x0066
 376:	b6 95       	lsr	r27
 378:	a7 95       	ror	r26
 37a:	97 95       	ror	r25
 37c:	87 95       	ror	r24
 37e:	80 93 74 00 	sts	0x0074, r24
 382:	90 93 75 00 	sts	0x0075, r25
 386:	a0 93 76 00 	sts	0x0076, r26
 38a:	b0 93 77 00 	sts	0x0077, r27
		eeprom_write_word(&eeprom_adc_half_value, AdcHalfValue);
 38e:	20 91 74 00 	lds	r18, 0x0074
 392:	30 91 75 00 	lds	r19, 0x0075
 396:	40 91 76 00 	lds	r20, 0x0076
 39a:	50 91 77 00 	lds	r21, 0x0077
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	b9 01       	movw	r22, r18
 3a4:	55 d1       	rcall	.+682    	; 0x650 <__eewr_word_tn2313>
		eeprom_busy_wait();
 3a6:	e1 99       	sbic	0x1c, 1	; 28
 3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <main+0x132>
	}
	sei();
 3aa:	78 94       	sei
		
			AdcAvgSum += AdcValue;
			AdcCount ++;
			if(AdcCount>=20)
			{
				AdcAvgValue = AdcAvgSum / 20;
 3ac:	0f 2e       	mov	r0, r31
 3ae:	f4 e1       	ldi	r31, 0x14	; 20
 3b0:	ef 2e       	mov	r14, r31
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	ff 2e       	mov	r15, r31
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	0f 2f       	mov	r16, r31
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	1f 2f       	mov	r17, r31
 3be:	f0 2d       	mov	r31, r0
						else
						{
							if(LAST_STOP_DIR == 0)
							{
								SET_DIR_RIGHT;
								LAST_STOP_DIR = 255;
 3c0:	dd 24       	eor	r13, r13
 3c2:	da 94       	dec	r13
								CLEAR_WAIT = 1;
 3c4:	cc 24       	eor	r12, r12
 3c6:	c3 94       	inc	r12
					}
					else if(AdcAvgValue > (AdcHalfValue + 50))
					{
						if(LAST_STOP_DIR == 255)
						{
							liczPowyzejPolowy(&ACTUAL_RELEASE_TIMER_VALUE);
 3c8:	cc e7       	ldi	r28, 0x7C	; 124
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
							if(ACTUAL_RELEASE_TIMER_VALUE > 250)
							{
								ACTUAL_RELEASE_TIMER_VALUE = 250;
							}
							SET_DIR_RIGHT;
							SET_STEPPER_START;
 3cc:	0f 2e       	mov	r0, r31
 3ce:	f3 e0       	ldi	r31, 0x03	; 3
 3d0:	9f 2e       	mov	r9, r31
 3d2:	f0 2d       	mov	r31, r0
						if(LAST_STOP_DIR == 255)
						{
							liczPowyzejPolowy(&ACTUAL_RELEASE_TIMER_VALUE);
							if(ACTUAL_RELEASE_TIMER_VALUE > 250)
							{
								ACTUAL_RELEASE_TIMER_VALUE = 250;
 3d4:	0f 2e       	mov	r0, r31
 3d6:	fa ef       	ldi	r31, 0xFA	; 250
 3d8:	af 2e       	mov	r10, r31
 3da:	bb 24       	eor	r11, r11
 3dc:	f0 2d       	mov	r31, r0
 3de:	83 ec       	ldi	r24, 0xC3	; 195
 3e0:	99 e0       	ldi	r25, 0x09	; 9
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <main+0x16e>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x174>
 3e8:	00 00       	nop
				//}			
			//}
		//}			
		
			_delay_ms(10);	
			AdcStart();
 3ea:	5a de       	rcall	.-844    	; 0xa0 <AdcStart>
		
			AdcAvgSum += AdcValue;
 3ec:	80 91 6f 00 	lds	r24, 0x006F
 3f0:	90 91 70 00 	lds	r25, 0x0070
 3f4:	a0 91 71 00 	lds	r26, 0x0071
 3f8:	b0 91 72 00 	lds	r27, 0x0072
 3fc:	20 91 67 00 	lds	r18, 0x0067
 400:	30 91 68 00 	lds	r19, 0x0068
 404:	40 91 69 00 	lds	r20, 0x0069
 408:	50 91 6a 00 	lds	r21, 0x006A
 40c:	82 0f       	add	r24, r18
 40e:	93 1f       	adc	r25, r19
 410:	a4 1f       	adc	r26, r20
 412:	b5 1f       	adc	r27, r21
 414:	80 93 6f 00 	sts	0x006F, r24
 418:	90 93 70 00 	sts	0x0070, r25
 41c:	a0 93 71 00 	sts	0x0071, r26
 420:	b0 93 72 00 	sts	0x0072, r27
			AdcCount ++;
 424:	80 91 73 00 	lds	r24, 0x0073
 428:	8f 5f       	subi	r24, 0xFF	; 255
 42a:	80 93 73 00 	sts	0x0073, r24
			if(AdcCount>=20)
 42e:	80 91 73 00 	lds	r24, 0x0073
 432:	84 31       	cpi	r24, 0x14	; 20
 434:	a0 f2       	brcs	.-88     	; 0x3de <main+0x16a>
			{
				AdcAvgValue = AdcAvgSum / 20;
 436:	60 91 6f 00 	lds	r22, 0x006F
 43a:	70 91 70 00 	lds	r23, 0x0070
 43e:	80 91 71 00 	lds	r24, 0x0071
 442:	90 91 72 00 	lds	r25, 0x0072
 446:	a8 01       	movw	r20, r16
 448:	97 01       	movw	r18, r14
 44a:	dd d0       	rcall	.+442    	; 0x606 <__udivmodsi4>
 44c:	20 93 6b 00 	sts	0x006B, r18
 450:	30 93 6c 00 	sts	0x006C, r19
 454:	40 93 6d 00 	sts	0x006D, r20
 458:	50 93 6e 00 	sts	0x006E, r21
				AdcCount = 0;
 45c:	10 92 73 00 	sts	0x0073, r1
				AdcAvgSum = 0;
 460:	10 92 6f 00 	sts	0x006F, r1
 464:	10 92 70 00 	sts	0x0070, r1
 468:	10 92 71 00 	sts	0x0071, r1
 46c:	10 92 72 00 	sts	0x0072, r1
	    
				if(INITIAL_LOCK==1)
 470:	80 91 61 00 	lds	r24, 0x0061
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	a1 f5       	brne	.+104    	; 0x4e0 <main+0x26c>
				{
					if((AdcAvgValue > (AdcHalfValue - 50)) && (AdcAvgValue < (AdcHalfValue + 50)))
 478:	20 91 74 00 	lds	r18, 0x0074
 47c:	30 91 75 00 	lds	r19, 0x0075
 480:	40 91 76 00 	lds	r20, 0x0076
 484:	50 91 77 00 	lds	r21, 0x0077
 488:	80 91 6b 00 	lds	r24, 0x006B
 48c:	90 91 6c 00 	lds	r25, 0x006C
 490:	a0 91 6d 00 	lds	r26, 0x006D
 494:	b0 91 6e 00 	lds	r27, 0x006E
 498:	22 53       	subi	r18, 0x32	; 50
 49a:	30 40       	sbci	r19, 0x00	; 0
 49c:	40 40       	sbci	r20, 0x00	; 0
 49e:	50 40       	sbci	r21, 0x00	; 0
 4a0:	28 17       	cp	r18, r24
 4a2:	39 07       	cpc	r19, r25
 4a4:	4a 07       	cpc	r20, r26
 4a6:	5b 07       	cpc	r21, r27
 4a8:	d8 f4       	brcc	.+54     	; 0x4e0 <main+0x26c>
 4aa:	20 91 74 00 	lds	r18, 0x0074
 4ae:	30 91 75 00 	lds	r19, 0x0075
 4b2:	40 91 76 00 	lds	r20, 0x0076
 4b6:	50 91 77 00 	lds	r21, 0x0077
 4ba:	80 91 6b 00 	lds	r24, 0x006B
 4be:	90 91 6c 00 	lds	r25, 0x006C
 4c2:	a0 91 6d 00 	lds	r26, 0x006D
 4c6:	b0 91 6e 00 	lds	r27, 0x006E
 4ca:	2e 5c       	subi	r18, 0xCE	; 206
 4cc:	3f 4f       	sbci	r19, 0xFF	; 255
 4ce:	4f 4f       	sbci	r20, 0xFF	; 255
 4d0:	5f 4f       	sbci	r21, 0xFF	; 255
 4d2:	82 17       	cp	r24, r18
 4d4:	93 07       	cpc	r25, r19
 4d6:	a4 07       	cpc	r26, r20
 4d8:	b5 07       	cpc	r27, r21
 4da:	10 f4       	brcc	.+4      	; 0x4e0 <main+0x26c>
					{
						INITIAL_LOCK = 0;
 4dc:	10 92 61 00 	sts	0x0061, r1
					}						
				}
		
				if(INITIAL_LOCK==0)
 4e0:	80 91 61 00 	lds	r24, 0x0061
 4e4:	88 23       	and	r24, r24
 4e6:	09 f0       	breq	.+2      	; 0x4ea <main+0x276>
 4e8:	76 c0       	rjmp	.+236    	; 0x5d6 <main+0x362>
				{
					if(AdcAvgValue < (AdcHalfValue - 50))
 4ea:	20 91 74 00 	lds	r18, 0x0074
 4ee:	30 91 75 00 	lds	r19, 0x0075
 4f2:	40 91 76 00 	lds	r20, 0x0076
 4f6:	50 91 77 00 	lds	r21, 0x0077
 4fa:	80 91 6b 00 	lds	r24, 0x006B
 4fe:	90 91 6c 00 	lds	r25, 0x006C
 502:	a0 91 6d 00 	lds	r26, 0x006D
 506:	b0 91 6e 00 	lds	r27, 0x006E
 50a:	22 53       	subi	r18, 0x32	; 50
 50c:	30 40       	sbci	r19, 0x00	; 0
 50e:	40 40       	sbci	r20, 0x00	; 0
 510:	50 40       	sbci	r21, 0x00	; 0
 512:	82 17       	cp	r24, r18
 514:	93 07       	cpc	r25, r19
 516:	a4 07       	cpc	r26, r20
 518:	b5 07       	cpc	r27, r21
 51a:	f8 f4       	brcc	.+62     	; 0x55a <main+0x2e6>
					{
						if(LAST_STOP_DIR == 255)
 51c:	80 91 60 00 	lds	r24, 0x0060
 520:	8f 3f       	cpi	r24, 0xFF	; 255
 522:	81 f4       	brne	.+32     	; 0x544 <main+0x2d0>
						{
							liczPonizejPolowy(&ACTUAL_RELEASE_TIMER_VALUE);
 524:	ce 01       	movw	r24, r28
 526:	76 de       	rcall	.-788    	; 0x214 <liczPonizejPolowy>
							if(ACTUAL_RELEASE_TIMER_VALUE > 250)
 528:	80 91 7c 00 	lds	r24, 0x007C
 52c:	90 91 7d 00 	lds	r25, 0x007D
 530:	8b 3f       	cpi	r24, 0xFB	; 251
 532:	91 05       	cpc	r25, r1
 534:	20 f0       	brcs	.+8      	; 0x53e <main+0x2ca>
							{
								ACTUAL_RELEASE_TIMER_VALUE = 250;
 536:	b0 92 7d 00 	sts	0x007D, r11
 53a:	a0 92 7c 00 	sts	0x007C, r10
							}
							SET_DIR_LEFT;
 53e:	92 98       	cbi	0x12, 2	; 18
							SET_STEPPER_START;
 540:	93 be       	out	0x33, r9	; 51
 542:	4d cf       	rjmp	.-358    	; 0x3de <main+0x16a>
						}				
						else
						{
							if(LAST_STOP_DIR == 1)
 544:	80 91 60 00 	lds	r24, 0x0060
 548:	81 30       	cpi	r24, 0x01	; 1
 54a:	09 f0       	breq	.+2      	; 0x54e <main+0x2da>
 54c:	48 cf       	rjmp	.-368    	; 0x3de <main+0x16a>
							{
								SET_DIR_LEFT;
 54e:	92 98       	cbi	0x12, 2	; 18
								LAST_STOP_DIR = 255;
 550:	d0 92 60 00 	sts	0x0060, r13
								CLEAR_WAIT = 1;
 554:	c0 92 7e 00 	sts	0x007E, r12
 558:	42 cf       	rjmp	.-380    	; 0x3de <main+0x16a>
							}
						}						
						//TCNT0 = ACTUAL_RELEASE_TIMER_VALUE;
					}
					else if(AdcAvgValue > (AdcHalfValue + 50))
 55a:	20 91 74 00 	lds	r18, 0x0074
 55e:	30 91 75 00 	lds	r19, 0x0075
 562:	40 91 76 00 	lds	r20, 0x0076
 566:	50 91 77 00 	lds	r21, 0x0077
 56a:	80 91 6b 00 	lds	r24, 0x006B
 56e:	90 91 6c 00 	lds	r25, 0x006C
 572:	a0 91 6d 00 	lds	r26, 0x006D
 576:	b0 91 6e 00 	lds	r27, 0x006E
 57a:	2e 5c       	subi	r18, 0xCE	; 206
 57c:	3f 4f       	sbci	r19, 0xFF	; 255
 57e:	4f 4f       	sbci	r20, 0xFF	; 255
 580:	5f 4f       	sbci	r21, 0xFF	; 255
 582:	28 17       	cp	r18, r24
 584:	39 07       	cpc	r19, r25
 586:	4a 07       	cpc	r20, r26
 588:	5b 07       	cpc	r21, r27
 58a:	f8 f4       	brcc	.+62     	; 0x5ca <main+0x356>
					{
						if(LAST_STOP_DIR == 255)
 58c:	80 91 60 00 	lds	r24, 0x0060
 590:	8f 3f       	cpi	r24, 0xFF	; 255
 592:	81 f4       	brne	.+32     	; 0x5b4 <main+0x340>
						{
							liczPowyzejPolowy(&ACTUAL_RELEASE_TIMER_VALUE);
 594:	ce 01       	movw	r24, r28
 596:	09 de       	rcall	.-1006   	; 0x1aa <liczPowyzejPolowy>
							if(ACTUAL_RELEASE_TIMER_VALUE > 250)
 598:	80 91 7c 00 	lds	r24, 0x007C
 59c:	90 91 7d 00 	lds	r25, 0x007D
 5a0:	8b 3f       	cpi	r24, 0xFB	; 251
 5a2:	91 05       	cpc	r25, r1
 5a4:	20 f0       	brcs	.+8      	; 0x5ae <main+0x33a>
							{
								ACTUAL_RELEASE_TIMER_VALUE = 250;
 5a6:	b0 92 7d 00 	sts	0x007D, r11
 5aa:	a0 92 7c 00 	sts	0x007C, r10
							}
							SET_DIR_RIGHT;
 5ae:	92 9a       	sbi	0x12, 2	; 18
							SET_STEPPER_START;
 5b0:	93 be       	out	0x33, r9	; 51
 5b2:	15 cf       	rjmp	.-470    	; 0x3de <main+0x16a>
						}		
						else
						{
							if(LAST_STOP_DIR == 0)
 5b4:	80 91 60 00 	lds	r24, 0x0060
 5b8:	88 23       	and	r24, r24
 5ba:	09 f0       	breq	.+2      	; 0x5be <main+0x34a>
 5bc:	10 cf       	rjmp	.-480    	; 0x3de <main+0x16a>
							{
								SET_DIR_RIGHT;
 5be:	92 9a       	sbi	0x12, 2	; 18
								LAST_STOP_DIR = 255;
 5c0:	d0 92 60 00 	sts	0x0060, r13
								CLEAR_WAIT = 1;
 5c4:	c0 92 7e 00 	sts	0x007E, r12
 5c8:	0a cf       	rjmp	.-492    	; 0x3de <main+0x16a>
						}					
						//TCNT0 = ACTUAL_RELEASE_TIMER_VALUE;
					}
					else
					{
						ACTUAL_RELEASE_TIMER_VALUE = 0;
 5ca:	10 92 7d 00 	sts	0x007D, r1
 5ce:	10 92 7c 00 	sts	0x007C, r1
						SET_STEPPER_STOP;
 5d2:	13 be       	out	0x33, r1	; 51
 5d4:	04 cf       	rjmp	.-504    	; 0x3de <main+0x16a>
					}
				}
				else
				{
					ACTUAL_RELEASE_TIMER_VALUE = 0;
 5d6:	10 92 7d 00 	sts	0x007D, r1
 5da:	10 92 7c 00 	sts	0x007C, r1
					SET_STEPPER_STOP;
 5de:	13 be       	out	0x33, r1	; 51
 5e0:	fe ce       	rjmp	.-516    	; 0x3de <main+0x16a>

000005e2 <__mulhi3>:
 5e2:	55 27       	eor	r21, r21
 5e4:	00 24       	eor	r0, r0

000005e6 <__mulhi3_loop>:
 5e6:	80 ff       	sbrs	r24, 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <__mulhi3_skip1>
 5ea:	06 0e       	add	r0, r22
 5ec:	57 1f       	adc	r21, r23

000005ee <__mulhi3_skip1>:
 5ee:	66 0f       	add	r22, r22
 5f0:	77 1f       	adc	r23, r23
 5f2:	61 15       	cp	r22, r1
 5f4:	71 05       	cpc	r23, r1
 5f6:	21 f0       	breq	.+8      	; 0x600 <__mulhi3_exit>
 5f8:	96 95       	lsr	r25
 5fa:	87 95       	ror	r24
 5fc:	00 97       	sbiw	r24, 0x00	; 0
 5fe:	99 f7       	brne	.-26     	; 0x5e6 <__mulhi3_loop>

00000600 <__mulhi3_exit>:
 600:	95 2f       	mov	r25, r21
 602:	80 2d       	mov	r24, r0
 604:	08 95       	ret

00000606 <__udivmodsi4>:
 606:	a1 e2       	ldi	r26, 0x21	; 33
 608:	1a 2e       	mov	r1, r26
 60a:	aa 1b       	sub	r26, r26
 60c:	bb 1b       	sub	r27, r27
 60e:	fd 01       	movw	r30, r26
 610:	0d c0       	rjmp	.+26     	; 0x62c <__udivmodsi4_ep>

00000612 <__udivmodsi4_loop>:
 612:	aa 1f       	adc	r26, r26
 614:	bb 1f       	adc	r27, r27
 616:	ee 1f       	adc	r30, r30
 618:	ff 1f       	adc	r31, r31
 61a:	a2 17       	cp	r26, r18
 61c:	b3 07       	cpc	r27, r19
 61e:	e4 07       	cpc	r30, r20
 620:	f5 07       	cpc	r31, r21
 622:	20 f0       	brcs	.+8      	; 0x62c <__udivmodsi4_ep>
 624:	a2 1b       	sub	r26, r18
 626:	b3 0b       	sbc	r27, r19
 628:	e4 0b       	sbc	r30, r20
 62a:	f5 0b       	sbc	r31, r21

0000062c <__udivmodsi4_ep>:
 62c:	66 1f       	adc	r22, r22
 62e:	77 1f       	adc	r23, r23
 630:	88 1f       	adc	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	1a 94       	dec	r1
 636:	69 f7       	brne	.-38     	; 0x612 <__udivmodsi4_loop>
 638:	60 95       	com	r22
 63a:	70 95       	com	r23
 63c:	80 95       	com	r24
 63e:	90 95       	com	r25
 640:	9b 01       	movw	r18, r22
 642:	ac 01       	movw	r20, r24
 644:	bd 01       	movw	r22, r26
 646:	cf 01       	movw	r24, r30
 648:	08 95       	ret

0000064a <__eerd_word_tn2313>:
 64a:	a8 e1       	ldi	r26, 0x18	; 24
 64c:	42 e0       	ldi	r20, 0x02	; 2
 64e:	05 c0       	rjmp	.+10     	; 0x65a <__eerd_blraw_tn2313>

00000650 <__eewr_word_tn2313>:
 650:	11 d0       	rcall	.+34     	; 0x674 <__eewr_byte_tn2313>
 652:	27 2f       	mov	r18, r23
 654:	10 c0       	rjmp	.+32     	; 0x676 <__eewr_r18_tn2313>

00000656 <__eerd_block_tn2313>:
 656:	a8 2f       	mov	r26, r24
 658:	86 2f       	mov	r24, r22

0000065a <__eerd_blraw_tn2313>:
 65a:	e8 2f       	mov	r30, r24
 65c:	e1 99       	sbic	0x1c, 1	; 28
 65e:	fe cf       	rjmp	.-4      	; 0x65c <__eerd_blraw_tn2313+0x2>
 660:	1f ba       	out	0x1f, r1	; 31
 662:	05 c0       	rjmp	.+10     	; 0x66e <__eerd_blraw_tn2313+0x14>
 664:	ee bb       	out	0x1e, r30	; 30
 666:	e0 9a       	sbi	0x1c, 0	; 28
 668:	e3 95       	inc	r30
 66a:	0d b2       	in	r0, 0x1d	; 29
 66c:	0d 92       	st	X+, r0
 66e:	41 50       	subi	r20, 0x01	; 1
 670:	c8 f7       	brcc	.-14     	; 0x664 <__eerd_blraw_tn2313+0xa>
 672:	08 95       	ret

00000674 <__eewr_byte_tn2313>:
 674:	26 2f       	mov	r18, r22

00000676 <__eewr_r18_tn2313>:
 676:	e1 99       	sbic	0x1c, 1	; 28
 678:	fe cf       	rjmp	.-4      	; 0x676 <__eewr_r18_tn2313>
 67a:	1c ba       	out	0x1c, r1	; 28
 67c:	1f ba       	out	0x1f, r1	; 31
 67e:	8e bb       	out	0x1e, r24	; 30
 680:	2d bb       	out	0x1d, r18	; 29
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	f8 94       	cli
 686:	e2 9a       	sbi	0x1c, 2	; 28
 688:	e1 9a       	sbi	0x1c, 1	; 28
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	01 96       	adiw	r24, 0x01	; 1
 68e:	08 95       	ret

00000690 <_exit>:
 690:	f8 94       	cli

00000692 <__stop_program>:
 692:	ff cf       	rjmp	.-2      	; 0x692 <__stop_program>
